{"version":3,"file":"BatchApiDocs-CdxDsBJf.js","sources":["../../src/components/collections/docs/BatchApiDocs.svelte"],"sourcesContent":["<script>\n    import { link } from \"svelte-spa-router\";\n    import ApiClient from \"@/utils/ApiClient\";\n    import CommonHelper from \"@/utils/CommonHelper\";\n    import CodeBlock from \"@/components/base/CodeBlock.svelte\";\n    import SdkTabs from \"@/components/base/SdkTabs.svelte\";\n\n    export let collection;\n\n    let responseTab = 200;\n    let responses = [];\n\n    $: backendAbsUrl = CommonHelper.getApiExampleUrl(ApiClient.baseURL);\n\n    $: dummyRecord = CommonHelper.dummyCollectionRecord(collection);\n\n    $: if (collection?.id) {\n        responses.push({\n            code: 200,\n            body: JSON.stringify(\n                [\n                    {\n                        status: 200,\n                        body: dummyRecord,\n                    },\n                    {\n                        status: 200,\n                        body: Object.assign({}, dummyRecord, { id: dummyRecord.id + \"2\" }),\n                    },\n                ],\n                null,\n                2,\n            ),\n        });\n\n        responses.push({\n            code: 400,\n            body: `\n                {\n                  \"status\": 400,\n                  \"message\": \"Batch transaction failed.\",\n                  \"data\": {\n                    \"requests\": {\n                      \"1\": {\n                        \"code\": \"batch_request_failed\",\n                        \"message\": \"Batch request failed.\",\n                        \"response\": {\n                          \"status\": 400,\n                          \"message\": \"Failed to create record.\",\n                          \"data\": {\n                            \"id\": {\n                              \"code\": \"validation_min_text_constraint\",\n                              \"message\": \"Must be at least 3 character(s).\",\n                              \"params\": { \"min\": 3 }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n            `,\n        });\n\n        responses.push({\n            code: 403,\n            body: `\n                {\n                  \"status\": 403,\n                  \"message\": \"Batch requests are not allowed.\",\n                  \"data\": {}\n                }\n            `,\n        });\n    }\n</script>\n\n<h3 class=\"m-b-sm\">Batch create/update/upsert/delete ({collection.name})</h3>\n<div class=\"content txt-lg m-b-sm\">\n    <p>Batch and transactional create/update/upsert/delete of multiple records in a single request.</p>\n</div>\n\n<div class=\"alert alert-warning\">\n    <div class=\"icon\">\n        <i class=\"ri-error-warning-line\" />\n    </div>\n    <div class=\"content\">\n        <p>\n            The batch Web API need to be explicitly enabled and configured from the\n            <a href=\"/settings\" use:link>Dashboard settings</a>.\n        </p>\n        <p>\n            Because this endpoint process the requests in a single transaction it could degrade the\n            performance of your application if not used with proper care and configuration (e.g. too large\n            allowed execution timeout, large body size limit, etc.).\n        </p>\n    </div>\n</div>\n\n<SdkTabs\n    js={`\n        import PocketBase from 'pocketbase';\n\n        const pb = new PocketBase('${backendAbsUrl}');\n\n        ...\n\n        const batch = pb.createBatch();\n\n        batch.collection('${collection?.name}').create({ ... });\n        batch.collection('${collection?.name}').update('RECORD_ID', { ... });\n        batch.collection('${collection?.name}').delete('RECORD_ID');\n        batch.collection('${collection?.name}').upsert({ ... });\n\n        const result = await batch.send();\n    `}\n    dart={`\n        import 'package:pocketbase/pocketbase.dart';\n\n        final pb = PocketBase('${backendAbsUrl}');\n\n        ...\n\n        final batch = pb.createBatch();\n\n        batch.collection('${collection?.name}').create(body: { ... });\n        batch.collection('${collection?.name}').update('RECORD_ID', body: { ... });\n        batch.collection('${collection?.name}').delete('RECORD_ID');\n        batch.collection('${collection?.name}').upsert(body: { ... });\n\n        final result = await batch.send();\n    `}\n/>\n\n<h6 class=\"m-b-xs\">API details</h6>\n<div class=\"api-route alert alert-success\">\n    <strong class=\"label label-primary\">POST</strong>\n    <div class=\"content\">/api/batch</div>\n</div>\n\n<div class=\"section-title\">Body Parameters</div>\n<p>\n    Body parameters could be sent as <em>application/json</em> or <em>multipart/form-data</em>.\n    <br />\n    File upload is supported only via <em>multipart/form-data</em> (see below for more details).\n</p>\n<table class=\"table-compact table-border m-t-xs m-b-base\">\n    <thead>\n        <tr>\n            <th>Param</th>\n            <th width=\"80%\">Description</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td valign=\"top\">\n                <div class=\"flex txt-nowrap\">\n                    <span class=\"label label-success\">Required</span>\n                    <span>requests</span>\n                </div>\n            </td>\n            <td>\n                <span class=\"label\">{`Array<Request>`}</span> - List of the requests to process.\n\n                <p>The supported batch request actions are:</p>\n                <ul>\n                    <li>record create - <code>POST /api/collections/{`{collection}`}/records</code></li>\n                    <li>\n                        record update -\n                        <code>PATCH /api/collections/{`{collection}`}/records/{`{id}`}</code>\n                    </li>\n                    <li>\n                        record upsert - <code>PUT /api/collections/{`{collection}`}/records</code>\n                        <br />\n                        <small class=\"txt-hint\">\n                            (the body must have <code class=\"txt-sm\">id</code> field)\n                        </small>\n                    </li>\n                    <li>\n                        record delete -\n                        <code>DELETE /api/collections/{`{collection}`}/records/{`{id}`}</code>\n                    </li>\n                </ul>\n                <p>Each batch Request element have the following properties:</p>\n                <ul>\n                    <li><code>url path</code> <em>(could include query parameters)</em></li>\n                    <li><code>method</code> <em>(GET, POST, PUT, PATCH, DELETE)</em></li>\n                    <li>\n                        <code>headers</code>\n                        <br />\n                        <em>\n                            (custom per-request <code>Authorization</code> header is not supported at the moment,\n                            aka. all batch requests have the same auth state)\n                        </em>\n                    </li>\n                    <li><code>body</code></li>\n                </ul>\n                <p>\n                    <strong>NB!</strong> When the batch request is send as\n                    <code>multipart/form-data</code>, the regular batch action fields are expected to be\n                    submitted as serailized json under the <code>@jsonPayload</code> field and file keys need\n                    to follow the pattern <code>requests.N.fileField</code> or\n                    <code>requests[N].fileField</code>\n                    <em>\n                        (this is usually handled transparently by the SDKs when their specific object notation\n                        is used)\n                    </em>.\n                    <br />\n                    If you don't use the SDKs or prefer manually to construct the <code>FormData</code>\n                    body, then it could look something like:\n                    <CodeBlock\n                        language=\"javascript\"\n                        content={`\n                            const formData = new FormData();\n\n                            formData.append(\"@jsonPayload\", JSON.stringify({\n                                requests: [\n                                    {\n                                        method: \"POST\",\n                                        url: \"/api/collections/${collection.name}/records?fields=id\",\n                                        body: { someField: \"test1\" }\n                                    },\n                                    {\n                                        method: \"PATCH\",\n                                        url: \"/api/collections/${collection.name}/records/RECORD_ID\",\n                                        body: { someField: \"test2\" }\n                                    }\n                                ]\n                            }))\n\n                            // file for the first request\n                            formData.append(\"requests.0.someFileField\", new File(...))\n\n                            // file for the second request\n                            formData.append(\"requests.1.someFileField\", new File(...))\n                        `}\n                    />\n                </p>\n            </td>\n        </tr>\n    </tbody>\n</table>\n\n<div class=\"section-title\">Responses</div>\n<div class=\"tabs\">\n    <div class=\"tabs-header compact combined left\">\n        {#each responses as response (response.code)}\n            <button\n                class=\"tab-item\"\n                class:active={responseTab === response.code}\n                on:click={() => (responseTab = response.code)}\n            >\n                {response.code}\n            </button>\n        {/each}\n    </div>\n    <div class=\"tabs-content\">\n        {#each responses as response (response.code)}\n            <div class=\"tab-item\" class:active={responseTab === response.code}>\n                <CodeBlock content={response.body} />\n            </div>\n        {/each}\n    </div>\n</div>\n"],"names":["button","ctx","insert","target","anchor","div","t1_value","_a","_b","_c","_d","_e","_f","_g","_h","get_key","i","get_key_1","h3","div0","div3","append","div1","div2","p1","a","p2","h6","div5","div6","p3","table","thead","tbody","tr1","td0","td1","span2","p4","ul0","li0","code0","li1","code1","li2","code2","br1","small","li3","code4","p5","ul1","p6","strong1","code10","code11","code12","code13","em6","br3","code14","div8","div11","div9","div10","current","dirty","set_data","t1","collection","$$props","responseTab","responses","response","dummyRecord","CommonHelper","$$invalidate","backendAbsUrl","ApiClient"],"mappings":"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"}